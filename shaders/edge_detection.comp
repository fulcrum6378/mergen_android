#version 450
#extension GL_ARB_separate_shader_objects : enable

#define H 720u
#define W 720u
#define WORKGROUP_SIZE 18u
// maxComputeWorkGroupInvocations in Mali G72 => 384

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1u) in;
// use `std430` instead of `std140` for the data structure to match that of C++.
layout(std430, binding = 0) readonly buffer bufI {
    uint arr[H][W];
};
layout(std430, binding = 1) buffer bufO {
    uint statuses[H][W];
};

uint dif(uint a, uint b) {
    return a > b ? a - b : b - a;
}

bool compareColours(uint a, uint b) {
    return dif(a >> 16, b >> 16) > 8u ||
        dif((a >> 8) & 0xFFu, (b >> 8) & 0xFFu) > 8u ||
        dif(a & 0xFFu, b & 0xFFu) > 8u;
}

void main() {
    uint x = gl_GlobalInvocationID.x, y = gl_GlobalInvocationID.y;
    // in order to fit the work into workgroups, some unnecessary threads are launched.
    // we terminate those threads here.
    if (x >= W || y >= H) return;

    bool nt = y != 0, nb = y != H - 1,
         nl = x != 0, nr = x != W - 1;
    if (nt && compareColours(arr[y][x], arr[y - 1][x])) { // top
        statuses[y][x] = 1u;
        return;
    }
    if (nt && nr && compareColours(arr[y][x], arr[y - 1][x + 1])) { // top-right
        statuses[y][x] = 1u;
        return;
    }
    if (nr && compareColours(arr[y][x], arr[y][x + 1])) { // right
        statuses[y][x] = 1u;
        return;
    }
    if (nb && nr && compareColours(arr[y][x], arr[y + 1][x + 1])) { // bottom-right
        statuses[y][x] = 1u;
        return;
    }
    if (nb && compareColours(arr[y][x], arr[y + 1][x])) { // bottom
        statuses[y][x] = 1u;
        return;
    }
    if (nb && nl && compareColours(arr[y][x], arr[y + 1][x - 1])) { // bottom-left
        statuses[y][x] = 1u;
        return;
    }
    if (nl && compareColours(arr[y][x], arr[y][x - 1])) { // left
        statuses[y][x] = 1u;
        return;
    }
    if (nt && nl && compareColours(arr[y][x], arr[y - 1][x - 1])) { // top-left
        statuses[y][x] = 1u;
        return;
    }
    statuses[y][x] = 0u;
}
